name: Windows RDP with High Performance

on:
  workflow_dispatch:
    inputs:
      rdp_duration:
        description: 'RDP session duration in minutes (max 360)'
        required: false
        default: '180'
        type: string
      enable_gpu:
        description: 'Enable GPU acceleration'
        required: false
        default: true
        type: boolean
      tunnel_service:
        description: 'Tunnel service to use (bore, localtunnel, or manual)'
        required: false
        default: 'bore'
        type: choice
        options:
        - bore
        - localtunnel
        - manual

jobs:
  setup-windows-rdp:
    runs-on: windows-latest
    timeout-minutes: 360
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: System Information
      run: |
        Write-Host "=== System Information ===" -ForegroundColor Green
        Get-ComputerInfo | Select-Object WindowsProductName, WindowsVersion, TotalPhysicalMemory
        Get-WmiObject -Class Win32_Processor | Select-Object Name, NumberOfCores, NumberOfLogicalProcessors
        Get-WmiObject -Class Win32_VideoController | Select-Object Name, AdapterRAM
        Write-Host "=== Disk Space ===" -ForegroundColor Green
        Get-WmiObject -Class Win32_LogicalDisk | Select-Object DeviceID, Size, FreeSpace | Format-Table
        
    - name: Enable RDP and Configure Firewall
      run: |
        Write-Host "Enabling RDP..." -ForegroundColor Yellow
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
        
    - name: Create RDP User
      run: |
        Write-Host "Creating RDP user..." -ForegroundColor Yellow
        $Password = ConvertTo-SecureString "P@ssw0rd123!" -AsPlainText -Force
        New-LocalUser -Name "rdpuser" -Password $Password -FullName "RDP User" -Description "GitHub Actions RDP User"
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "rdpuser"
        Add-LocalGroupMember -Group "Administrators" -Member "rdpuser"
        
    - name: Configure High Performance Settings
      run: |
        Write-Host "Configuring high performance settings..." -ForegroundColor Yellow
        
        # Set power plan to High Performance
        powercfg -setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
        
        # Disable Windows Defender real-time protection for better performance
        Set-MpPreference -DisableRealtimeMonitoring $true -ErrorAction SilentlyContinue
        
        # Optimize visual effects for performance
        $regPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects"
        if (!(Test-Path $regPath)) { New-Item -Path $regPath -Force }
        Set-ItemProperty -Path $regPath -Name "VisualFXSetting" -Value 2
        
        # Disable unnecessary services
        $servicesToDisable = @(
            "Themes",
            "TabletInputService",
            "Fax"
        )
        foreach ($service in $servicesToDisable) {
            try {
                Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
                Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
                Write-Host "Disabled service: $service" -ForegroundColor Green
            } catch {
                Write-Host "Could not disable service: $service" -ForegroundColor Red
            }
        }
        
    - name: Install Google Chrome
      run: |
        Write-Host "Installing Google Chrome..." -ForegroundColor Yellow

        # Install Chocolatey
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

        # Install only Google Chrome
        choco install -y googlechrome

        Write-Host "Google Chrome installed successfully!" -ForegroundColor Green
        
    - name: Setup GPU Acceleration (if enabled)
      if: ${{ github.event.inputs.enable_gpu == 'true' }}
      run: |
        Write-Host "Configuring GPU acceleration..." -ForegroundColor Yellow
        
        # Enable hardware acceleration in registry
        $regPath = "HKLM:\SYSTEM\CurrentControlSet\Control\GraphicsDrivers"
        Set-ItemProperty -Path $regPath -Name "HwSchMode" -Value 2 -ErrorAction SilentlyContinue
        
        # DirectX and GPU info
        dxdiag /t dxdiag_output.txt
        Write-Host "DirectX diagnostics saved to dxdiag_output.txt"
        
    - name: Configure Remote Desktop Settings
      run: |
        Write-Host "Optimizing RDP settings..." -ForegroundColor Yellow
        
        # Enable RemoteFX
        $regPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        if (!(Test-Path $regPath)) { New-Item -Path $regPath -Force }
        Set-ItemProperty -Path $regPath -Name "fEnableRemoteFXAdvancedRemoteApp" -Value 1
        
        # Optimize RDP performance
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "fDisableAutoReconnect" -Value 0
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "MaxInstanceCount" -Value 999999
        
    - name: Setup Tunnel Service
      run: |
        $tunnelService = "${{ github.event.inputs.tunnel_service }}"
        Write-Host "Setting up tunnel service: $tunnelService" -ForegroundColor Yellow

        switch ($tunnelService) {
            "bore" {
                Write-Host "Setting up Bore tunnel..." -ForegroundColor Yellow
                try {
                    # Install Visual C++ Redistributable first
                    Write-Host "Installing Visual C++ Redistributable..." -ForegroundColor Yellow
                    $vcRedistUrl = "https://aka.ms/vs/17/release/vc_redist.x64.exe"
                    Invoke-WebRequest -Uri $vcRedistUrl -OutFile "vc_redist.x64.exe" -UseBasicParsing
                    Start-Process -FilePath ".\vc_redist.x64.exe" -ArgumentList "/quiet" -Wait

                    # Download bore (correct URL and version)
                    $boreUrl = "https://github.com/ekzhang/bore/releases/download/v0.6.0/bore-v0.6.0-x86_64-pc-windows-msvc.zip"
                    Write-Host "Downloading bore v0.6.0..." -ForegroundColor Yellow
                    Invoke-WebRequest -Uri $boreUrl -OutFile "bore.zip" -UseBasicParsing

                    # Extract bore
                    Write-Host "Extracting bore..." -ForegroundColor Yellow
                    Expand-Archive -Path "bore.zip" -DestinationPath "." -Force

                    # Test bore
                    Write-Host "Testing bore..." -ForegroundColor Yellow
                    $testResult = & ".\bore.exe" --help 2>&1
                    Write-Host "Bore test result: $testResult" -ForegroundColor Green

                    Write-Host "Starting bore tunnel..." -ForegroundColor Yellow
                    # Start bore tunnel and capture output
                    $boreProcess = Start-Process -FilePath ".\bore.exe" -ArgumentList "local", "3389", "--to", "bore.pub" -PassThru -RedirectStandardOutput "bore_output.txt" -RedirectStandardError "bore_error.txt"

                    # Wait for bore to start and get the address
                    Start-Sleep -Seconds 15

                    # Read bore output to get the tunnel address
                    if (Test-Path "bore_output.txt") {
                        $boreOutput = Get-Content "bore_output.txt" -Raw
                        Write-Host "Bore Output: $boreOutput" -ForegroundColor Cyan
                    }

                    if (Test-Path "bore_error.txt") {
                        $boreError = Get-Content "bore_error.txt" -Raw
                        if ($boreError) {
                            Write-Host "Bore Error: $boreError" -ForegroundColor Red
                        }
                    }

                    # Check if bore process is running
                    if ($boreProcess -and !$boreProcess.HasExited) {
                        Write-Host "=== RDP CONNECTION INFO ===" -ForegroundColor Green
                        Write-Host "Bore tunnel is running! Process ID: $($boreProcess.Id)" -ForegroundColor Cyan
                        Write-Host "Check bore.pub for your tunnel address" -ForegroundColor Cyan
                        Write-Host "Username: rdpuser" -ForegroundColor Cyan
                        Write-Host "Password: P@ssw0rd123!" -ForegroundColor Cyan
                        Write-Host "Note: Tunnel address will be shown at bore.pub" -ForegroundColor Yellow
                        Write-Host "=========================" -ForegroundColor Green
                    } else {
                        Write-Host "Bore process failed to start or exited immediately" -ForegroundColor Red
                        if (Test-Path "bore_error.txt") {
                            $errorContent = Get-Content "bore_error.txt"
                            Write-Host "Error details: $errorContent" -ForegroundColor Red
                        }
                    }
                } catch {
                    Write-Host "Error setting up bore: $($_.Exception.Message)" -ForegroundColor Red
                    Write-Host "Stack trace: $($_.ScriptStackTrace)" -ForegroundColor Red
                }
            }

            "localtunnel" {
                Write-Host "Setting up LocalTunnel..." -ForegroundColor Yellow
                try {
                    # Install Node.js and npm
                    Write-Host "Installing Node.js..." -ForegroundColor Yellow
                    choco install -y nodejs

                    # Refresh environment
                    $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")

                    Write-Host "Installing localtunnel..." -ForegroundColor Yellow
                    npm install -g localtunnel

                    Write-Host "Starting localtunnel..." -ForegroundColor Yellow
                    # Start localtunnel in background
                    $ltProcess = Start-Process -FilePath "npx" -ArgumentList "localtunnel", "--port", "3389" -PassThru -WindowStyle Hidden

                    Start-Sleep -Seconds 15

                    Write-Host "=== RDP CONNECTION INFO ===" -ForegroundColor Green
                    Write-Host "LocalTunnel started! Check the console output for your URL" -ForegroundColor Cyan
                    Write-Host "Username: rdpuser" -ForegroundColor Cyan
                    Write-Host "Password: P@ssw0rd123!" -ForegroundColor Cyan
                    Write-Host "Note: LocalTunnel URL will be displayed in the process output" -ForegroundColor Yellow
                    Write-Host "=========================" -ForegroundColor Green
                } catch {
                    Write-Host "Error setting up localtunnel: $($_.Exception.Message)" -ForegroundColor Red
                }
            }

            "manual" {
                Write-Host "=== MANUAL TUNNEL SETUP ===" -ForegroundColor Yellow
                Write-Host "RDP server is ready! Choose your preferred tunnel method:" -ForegroundColor Green
                Write-Host ""
                Write-Host "Option 1 - Serveo (SSH):" -ForegroundColor Cyan
                Write-Host "ssh -R 3389:localhost:3389 serveo.net" -ForegroundColor White
                Write-Host ""
                Write-Host "Option 2 - Bore:" -ForegroundColor Cyan
                Write-Host "Download: https://github.com/ekzhang/bore/releases" -ForegroundColor White
                Write-Host "Run: bore local 3389 --to bore.pub" -ForegroundColor White
                Write-Host ""
                Write-Host "Option 3 - LocalTunnel:" -ForegroundColor Cyan
                Write-Host "npm install -g localtunnel" -ForegroundColor White
                Write-Host "lt --port 3389" -ForegroundColor White
                Write-Host ""
                Write-Host "RDP Credentials:" -ForegroundColor Green
                Write-Host "Username: rdpuser" -ForegroundColor White
                Write-Host "Password: P@ssw0rd123!" -ForegroundColor White
                Write-Host "Port: 3389" -ForegroundColor White
                Write-Host "=========================" -ForegroundColor Yellow
            }
        }
        
    - name: Display Connection Information
      run: |
        Write-Host "=== FINAL SYSTEM STATUS ===" -ForegroundColor Green
        Write-Host "RDP is now enabled and configured for high performance" -ForegroundColor Cyan
        Write-Host "Session will remain active for ${{ github.event.inputs.rdp_duration }} minutes" -ForegroundColor Cyan
        Write-Host "" 
        Write-Host "=== CONNECTION DETAILS ===" -ForegroundColor Green
        Write-Host "Username: rdpuser" -ForegroundColor White
        Write-Host "Password: P@ssw0rd123!" -ForegroundColor White
        Write-Host "Port: 3389" -ForegroundColor White
        Write-Host "" 
        Write-Host "Check ngrok dashboard at: http://localhost:4040" -ForegroundColor Yellow
        Write-Host "==========================" -ForegroundColor Green
        
        # Show current performance metrics
        Get-Counter "\Processor(_Total)\% Processor Time" -SampleInterval 1 -MaxSamples 1
        Get-Counter "\Memory\Available MBytes" -SampleInterval 1 -MaxSamples 1
        
    - name: Keep session alive
      run: |
        Write-Host "Keeping RDP session alive for ${{ github.event.inputs.rdp_duration }} minutes..." -ForegroundColor Yellow
        $duration = [int]"${{ github.event.inputs.rdp_duration }}"
        $endTime = (Get-Date).AddMinutes($duration)

        # Disable sleep and hibernation
        powercfg -change -standby-timeout-ac 0
        powercfg -change -hibernate-timeout-ac 0
        powercfg -change -monitor-timeout-ac 0

        while ((Get-Date) -lt $endTime) {
            $remaining = $endTime - (Get-Date)
            $hours = [math]::Floor($remaining.TotalHours)
            $minutes = $remaining.Minutes
            $seconds = $remaining.Seconds

            Write-Host "Session active. Time remaining: ${hours}h ${minutes}m ${seconds}s" -ForegroundColor Green
            Write-Host "RDP Address available via ngrok tunnel" -ForegroundColor Cyan

            # Simple keep-alive without SendKeys
            Get-Date | Out-Null

            Start-Sleep -Seconds 60
        }

        Write-Host "RDP session time expired. Workflow will end." -ForegroundColor Red
